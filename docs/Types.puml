@startuml

interface IDBArrayKey
interface IDBKeyRange

Key <-- string
Key <-- number
Key <-- Date
Key <-- ArrayBufferView
Key <-- ArrayBuffer
Key <-- IDBArrayKey
Key <-- IDBKeyRange

interface CrudApi<T> {
  create(obj: T): Promise<T|undefined>
  update(obj: T): Promise<T|undefined>
  delete(obj: T): Promise<void>
  get(id: Key): Promise<T|undefined>
  gets(): Promise<T[]>
}

interface StoreIndex {
  string name
	string? keyPath
	boolean? unique
}

interface StoreSchema {
  string dbName
	number dbVersion
	string store
	string? keyPath
	StoreIndex[] indices
  (IDBDatabase): Promise<boolean>? onUpgradeNeeded
}

interface CheckApiOnline {
  isOnline(): Promise<boolean>
}

interface RegisterSchemaArgs<T> {
  StoreSchema schema
  CrudApi<T>? api
  string? schemaKey
}

class Database<T> {
  string key
  CrudApi<T>? api
  StoreSchema schema
}

class CrudoDb {
  Record<string, Database> databases
  Record<string, StoreApi> storeApis

  gets<T>(schemaKey: string): Promise<T[]>
  get<T>(schemaKey: string, id: Key): Promise<T|undefined>
  create<T>(schemaKey: string, obj: T): Promise<T|undefined>
  update<T>(schemaKey: string, obj: T): Promise<T|undefined>
  delete<T>(schemaKey: string, obj: T): Promise<void>

  applySchema<T>(args: RegisterSchemaArgs<T>): Promise<StoreApi<T>>
  registerSchema<T>(args: RegisterSchemaArgs<T>): Promise<string>

  sync(schemaKeys: string[]): Promise<void>
}

class StoreApi<T> {
  CrudoDb db
  string schemaKey

  sync(): Promise<void>
}

CrudApi <-- StoreApi

@enduml
